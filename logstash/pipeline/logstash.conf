# 파일 하나 추가할때마다 input filter output 모두 각각 추가

input {
	beats {
		port => 5044
	}
}

## add your filters / logstash plugins configuration here

filter {
	if "No results" in [message] {
		drop {}
	}
	if [types] == "flows" {
		csv {
			columns => [ "timestamp","src_ip_addr","src_cc","dst_ip_addr","dst_cc","proto","src_port","dst_port","tcp_flags","num_pkts","num_octets","a","b" ]
			skip_empty_columns => true
			separator => ","
		}
	}
	else if [types] == "apt_dns" {
		csv {
			columns => [ "timestamp", "dnsrr", "ip_addr", "cc", "type", "ttl" ]
			skip_empty_columns => true
			separator => ","
		}
	}
	else if [types] == "apt_ips" {
		csv {
			columns => [ "timestamp", "ip_addr", "cc" ]
			skip_empty_columns => true
			separator => ","
		}
	}
	else if [types] == "banners" {
		csv {
			columns => [ "timestamp", "ip_addr", "cc", "port", "type", "data", "sub_type", "asn" ]
			skip_empty_columns => true
			separator => ","
		}
	}
	else if [types] == "banners_ptr" {
		csv {
			columns => [ "timestamp", "ip_addr", "cc", "asn", "ptr" ]
			skip_empty_columns => true
			separator => ","
		}
	}
	else if [types] == "bars_controllers" {
		csv {
			columns => [ "hostname","ip_addr","cc","proto","port","controller_uri","type","family","subfamily","first_seen","last_seen","active" ]
			skip_empty_columns => true
			separator => ","
		}
		date {
			match => [ "first_seen", "yyyy-MM-dd HH:mm:ss" ]
			timezone => "UTC"
			target => "first_seen"
		}
		date {
			match => [ "last_seen", "yyyy-MM-dd HH:mm:ss" ]
			timezone => "UTC"
			target => "last_seen"
		}
	}
	else if [types] == "bars_victims" {
		csv {
			columns => [ "timestamp","host_ip_addr","host_cc","proto","port","controller","controller_ip_addr","controller_cc","controller_port","reputation_score","asn","family","subfamily" ]
			skip_empty_columns => true
			separator => ","
		}
	}
	else if [types] == "beacons" {
		csv {
			columns => [ "timestamp","client_ip_addr","client_cc","server_ip_addr","server_cc","server_comment","server_port","proto" ]
			skip_empty_columns => true
			separator => ","
		}
	}
	else if [types] == "bgp_history" {
		csv {
			columns => [ "timestamp","prefix","cc_prefix","origin","cc_origin","asname" ]
			skip_empty_columns => true
			separator => ","
		}
		
	}
	else if [types] == "bgp_info" {
		csv {
			columns => [ "prefix","source_asn","aspath","pathlen","prepend","cc_pfx","cc_asn","rir_pfx","rir_asn","bogon","bogus_asn" ]
			skip_empty_columns => true
			separator => ","
		}
	}
	else if [types] == "bgp_updates" {
		csv {
			columns => [ "timestamp","ipv","origin","action","network_ip_addr","network_cc","aspath","multi_exit_disc","atomic_aggregate","aggregator_asn","aggregator_ip_addr","aggregator_cc","community" ]
			skip_empty_columns => true
			separator => ","
		}
	}
	else if [types] == "compromised_hosts" {
		csv {
			columns => [ "timestamp","ip_addr","cc","asn","comment","rir","src_port","malware" ]
			skip_empty_columns => true
			separator => ","
		}
	}
	else if [types] == "conpot_honeypot" {
		csv {
			columns => [ "timestamp","src_ip_addr","src_cc","src_port","application_proto","data" ]
			skip_empty_columns => true
			separator => ","
		}
	}
	else if [types] == "cookies" {
		csv {
			columns => [ "timestamp","src_ip_addr","src_cc","src_port","dst_ip_addr","dst_cc","dst_port","host","uri","user_agent","referer","language","cookie","cookie_sha1" ]
			skip_empty_columns => true
			separator => ","
		}
	}
	else if [types] == "cowrie_honeypot" {
		csv {
			columns => [ "start_time","end_time","commands","credentials","dst_port","logged_in","src_ip_addr","src_cc","src_port","unknown_commands" ]
			skip_empty_columns => true
			separator => ","
		}
		date {
			match => [ "start_time", "YYYY-MM-dd HH:mm:ss" ]
			timezone => "UTC"
			target => "start_time"
		}
		date {
			match => [ "end_time", "YYYY-MM-dd HH:mm:ss" ]
			timezone => "UTC"
			target => "end_time"
		}
	}
	else if [types] == "darknet" {
		csv {
			columns => [ "timestamp","src_ip_addr","src_cc","src_port","dst_port","proto","length","ip_version" ]
			skip_empty_columns => true
			separator => ","
		}
	}
	else if [types] == "ddos_attacks" {
		csv {
			columns => [ "begin_time","end_time","target_hostname","target_ip_addr","target_cc","subtarget","controller","controller_ip_addr","controller_cc","controller_port","command","family","subfamily" ]
			skip_empty_columns => true
			separator => ","
		}
	}
	else if [types] == "ddos_commands" {
		csv {
			columns => [ "timestamp","target_hostname","target_ip_addr","target_cc","subtarget","controller_type","controller","controller_ip_addr","controller_cc","controller_port","attack_command" ]
			skip_empty_columns => true
			separator => ","
		}
	}
	else if [types] == "dns_derived_ips_via_ip" {
		csv {
			columns => [ "related_ip_addr","related_cc","query_term","query_term_cc","first_seen","last_seen","relation" ]
			skip_empty_columns => true
			separator => ","
		}
		date {
			match => [ "first_seen", "YYYY-MM-dd HH:mm:ss" ]
			timezone => "UTC"
			target => "first_seen"
		}
		date {
			match => [ "last_seen", "YYYY-MM-dd HH:mm:ss" ]
			timezone => "UTC"
			target => "last_seen"
		}
	}
	else if [types] == "dns_derived_domains_via_ip" {
		csv {
			columns => [ "query_term","query_term_cc","related_domain","first_seen","last_seen","relation" ]
			skip_empty_columns => true
			separator => ","
		}
		date {
			match => [ "first_seen", "YYYY-MM-dd HH:mm:ss" ]
			timezone => "UTC"
			target => "first_seen"
		}
		date {
			match => [ "last_seen", "YYYY-MM-dd HH:mm:ss" ]
			timezone => "UTC"
			target => "last_seen"
		}
	}
	else if [types] == "dns_fingerprint" {
		csv {
			columns => [ "timestamp","ip_addr","cc","fingerprint" ]
			skip_empty_columns => true
			separator => ","
		}
	}
	else if [types] == "dns_query" {
		csv {
			columns => [ "timestamp","proto","src_ip_addr","src_cc","dst_ip_addr","dst_cc","qname","class","type","zone" ]
			skip_empty_columns => true
			separator => ","
		}
	}
	else if [types] == "nmap_dnsrr" {
		csv {
			columns => [ "timestamp","ip_addr","cc","dnsrr" ]
			skip_empty_columns => true
			separator => ","
		}
	}
	else if [types] == "nmap_fingerprint" {
		csv {
			columns => [ "timestamp","ip_addr","cc","os" ]
			skip_empty_columns => true
			separator => ","
		}
	}
	else if [types] == "nmap_port" {
		csv {
			columns => [ "timestamp","ip_addr","cc","proto","port","service","version" ]
			skip_empty_columns => true
			separator => ","
		}
	}
	else if [types] == "ntp_server" {
		csv {
			columns => [ "timestamp","src_ip_addr","src_cc","version","processor","system","stratum","refid","refid_cc","raw" ]
			skip_empty_columns => true
			separator => ","
		}
	}
	else if [types] == "open_ports" {
		csv {
			columns => [ "timestamp","ip_addr","cc","proto","port","service","data","asn","asname" ]
			skip_empty_columns => true
			separator => ","
		}
	}
	else if [types] == "open_resolvers" {
		csv {
			columns => [ "timestamp","src_ip_addr","src_cc" ]
			skip_empty_columns => true
			separator => ","
		}
	}
	else if [types] == "os_fingerprint" {
		csv {
			columns => [ "timestamp","src_ip_addr","src_cc","src_port","os","description","dst_ip_addr","dst_cc","dst_port","comment" ]
			skip_empty_columns => true
			separator => ","
		}
	}
	else if [types] == "pdns" {
		csv {
			columns => [ "timestamp","src_ip_addr","src_cc","proto","section","aa","qname","class","type","ttl","rdata","rdata_cc" ]
			skip_empty_columns => true
			separator => ","
		}
	}
	else if [types] == "pdns_nxd" {
		csv {
			columns => [ "timestamp","proto","src_ip_addr","src_cc","dst_ip_addr","dst_cc","dst_port","qname","class","type","zone" ]
			skip_empty_columns => true
			separator => ","
		}
	}
	else if [types] == "pdns_other" {
		csv {
			columns => [ "timestamp","src_ip_addr","src_cc","proto","section","aa","qname","class","type","ttl","rdata" ]
			skip_empty_columns => true
			separator => ","
		}
	}
	else if [types] == "portscan" {
		csv {
			columns => [ "timestamp","src_ip_addr","src_cc","dst_ip_addr","dst_cc","scan_type","scan_msg","connection_count","ip_count","ip_range","port_proto_count","port_proto_range"]
			skip_empty_columns => true
			separator => ","
		}
	}
	else if [types] == "router" {
		csv {
			columns => [ "timestamp","ip_addr","cc","vendor","os_version","processor" ]
			skip_empty_columns => true
			separator => ","
		}
	}
	else if [types] == "scanner" {
		csv {
			columns => [ "ip_addr","cc","proto","ports","interval_probes_unique_dst_ip","interval_probes_unique_ports","interval_slash8_visited","total_ips_probed","asn" ]
			skip_empty_columns => true
			separator => ","
		}
	}
	else if [types] == "sip" {
		csv {
			columns => [ "timestamp","src_ip_addr","src_cc","dst_ip_addr","dst_cc","sip_response","sip_response_code","server","user_agent","allow","accept","response","from_display","from_number","from_ip_addr","from_cc","from_port","to_display","to_number","to_port","to_ip_addr","to_cc","contact_display","contact_number","contact_ip_addr","contact_cc","contact_port","session_owner" ]
			skip_empty_columns => true
			separator => ","
		}
	}
	else if [types] == "snmp" {
		csv {
			columns => [ "timestamp","ip_addr","cc","version","oid_string" ]
			skip_empty_columns => true
			separator => ","
		}
	}
	else if [types] == "ssh" {
		csv {
			columns => [ "timestamp","ip_addr","cc","os_version","ssh_version","type","key","city","asn","add_timestamp" ]
			skip_empty_columns => true
			separator => ","
		}
		date {
			match => [ "add_timestamp", "yyyy-MM-dd HH:mm:ss" ]
			target => "add_timestamp"
			timezone => "UTC"
		}
	}
	else if [types] == "spam_headers" {
		csv {
			columns => [ "observed_at","src_ip_addr","src_cc","src_port","dst_port","from_name","from_email","to_addrs","cc_addrs","rcpt_to_addrs","subject","message_id" ]
			skip_empty_columns => true
			separator => ","
		}
	}
	else if [types] == "urls" {
		csv {
			columns => [ "timestamp","src_ip_addr","src_cc","src_port","dst_ip_addr","dst_cc","dst_port","url" ]
			skip_empty_columns => true
			separator => ","
		}
	}
	else if [types] == "useragents" {
		csv {
			columns => [ "timestamp","src_ip_addr","src_cc","src_port","x_forwarded_for","via","dst_ip_addr","dst_cc","dst_port","user_agent","cpu","languages","character_sets" ]
			skip_empty_columns => true
			separator => ","
		}
	}
	else if [types] == "tor" {
		csv {
			columns => [ "timestamp","router_name","ip_addr","cc","ipv6_addr","ipv6_cc","or_port","dir_port","platform","bandwidth","uptime","fingerprint","authority","hs_dir","exit","fast","guard","named","stable","running","valid","v2_dir","hibernating","bad_exit","version","portlist","contact","published","weight" ]
			skip_empty_columns => true
			separator => ","
		}
	}
	else if [types] == "x509" {
		csv {
			columns => [ "timestamp","ip_addr","cc","hostname","port","cn","altnames","c","o","email","subject","not_after","not_before","version","md5","sha1","issuer","issuer_cn","issuer_c","issuer_o","sig_algo","serial,pem" ]
			skip_empty_columns => true
			separator => ","
		}
	}
	date {
		match => [ "timestamp", "YYYY-MM-dd HH:mm:ss" ]
		timezone => "UTC"
		target => "timestamp"
	}
	mutate {
		remove_field => [ "@timestamp", "@version", "path", "message", "host", "tags" ]
	}
}

## Add your filters / logstash plugins configuration here

output {
	if [types] == "flows" {
		elasticsearch {
			hosts => "elasticsearch:9200"
			index => "recon-flows"
		}
	}
	else if [types] == "apt_dns" {
		elasticsearch {
			hosts => "elasticsearch:9200"
			index => "recon-apt_threats_dns"
		}
	}
	else if [types] == "apt_ip" {
		elasticsearch {
			hosts => "elasticsearch:9200"
			index => "recon-apt_threats_ips"
		}
	}
	else if [types] == "banners_ptr" {
		elasticsearch {
			hosts => "elasticsearch:9200"
			index => "recon-banners_ptr"
		}
	}
	else if [types] == "banners" {
		elasticsearch {
			hosts => "elasticsearch:9200"
			index => "recon-banners"
		}
	}
	else if [types] == "bars_controllers" {
		elasticsearch {
			hosts => "elasticsearch:9200"
			index => "recon-bars_botnet_controllers"
		}
	}
	else if [types] == "bars_victims" {
		elasticsearch {
			hosts => "elasticsearch:9200"
			index => "recon-bars_observed_infected_victims"
		}
	}
	else if [types] == "beacons" {
		elasticsearch {
			hosts => "elasticsearch:9200"
			index => "recon-beacons"
		}
	}
	else if [types] == "bgp_history" {
		elasticsearch {
			hosts => "elasticsearch:9200"
			index => "recon-bgp_history"
		}
	}
	else if [types] == "bgp_info" {
		elasticsearch {
			hosts => "elasticsearch:9200"
			index => "recon-bgp_routing_snapshot"
		}
	}
	else if [types] == "bgp_updates" {
		elasticsearch {
			hosts => "elasticsearch:9200"
			index => "recon-bgp_global_routing_updates"
		}
	}
	else if [types] == "compromised_hosts" {
		elasticsearch {
			hosts => "elasticsearch:9200"
			index => "recon-compromised_hosts"
		}
	}
	else if [types] == "conpot_honeypot" {
		elasticsearch {
			hosts => "elasticsearch:9200"
			index => "recon-conpot"
		}
	}
	else if [types] == "cookies" {
		elasticsearch {
			hosts => "elasticsearch:9200"
			index => "recon-cookies"
		}
	}
	else if [types] == "cowrie_honeypot" {
		elasticsearch {
			hosts => "elasticsearch:9200"
			index => "recon-cowrie_honeypot"
		}
	}
	else if [types] == "darknet" {
		elasticsearch {
			hosts => "elasticsearch:9200"
			index => "recon-darknet"
		}
	}
	else if [types] == "ddos_attacks" {
		elasticsearch {
			hosts => "elasticsearch:9200"
			index => "recon-bars_observed_ddos_attack"
		}
	}
	else if [types] == "ddos_commands" {
		elasticsearch {
			hosts => "elasticsearch:9200"
			index => "recon-observed_ddos_attack_commands"
		}
	}
	else if [types] == "dns_derived_domains_via_ip" {
		elasticsearch {
			hosts => "elasticsearch:9200"
			index => "recon-dns_dervied_domains"
		}
	}
	else if [types] == "dns_derived_ips_via_ip" {
		elasticsearch {
			hosts => "elasticsearch:9200"
			index => "recon-dns_derived_ips"
		}
	}
	else if [types] == "dns_fingerprint" {
		elasticsearch {
			hosts => "elasticsearch:9200"
			index => "recon-dns_server_fingerprint"
		}
	}
	else if [types] == "dns_query" {
		elasticsearch {
			hosts => "elasticsearch:9200"
			index => "recon-dns_queries"
		}
	}
	else if [types] == "nmap_dnsrr" {
		elasticsearch {
			hosts => "elasticsearch:9200"
			index => "recon-nmap_reverse_dns_lookups"
		}
	}
	else if [types] == "nmap_fingerprint" {
		elasticsearch {
			hosts => "elasticsearch:9200"
			index => "recon-nmap_os_fingerprinting"
		}
	}
	else if [types] == "nmap_port" {
		elasticsearch {
			hosts => "elasticsearch:9200"
			index => "recon-nmap_open_ports"
		}
	}
	else if [types] == "ntp_server" {
		elasticsearch {
			hosts => "elasticsearch:9200"
			index => "recon-ntp_server_info"
		}
	}
	else if [types] == "open_ports" {
		elasticsearch {
			hosts => "elasticsearch:9200"
			index => "recon-open_ports"
		}
	}
	else if [types] == "open_resolvers" {
		elasticsearch {
			hosts => "elasticsearch:9200"
			index => "recon-open_resolvers"
		}
	}
	else if [types] == "os_fingerprint" {
		elasticsearch {
			hosts => "elasticsearch:9200"
			index => "recon-os_fingerprinting"
		}
	}
	else if [types] == "pdns" {
		elasticsearch {
			hosts => "elasticsearch:9200"
			index => "recon-pdns_name-to-address_mapping"
		}
	}
	else if [types] == "pdns_nxd" {
		elasticsearch {
			hosts => "elasticsearch:9200"
			index => "recon-pdns_nxdomain"
		}
	}
	else if [types] == "pdns_other" {
		elasticsearch {
			hosts => "elasticsearch:9200"
			index => "recon-pdns_other_records"
		}
	}
	else if [types] == "portscan" {
		elasticsearch {
			hosts => "elasticsearch:9200"
			index => "recon-port_scan"
		}
	}
	else if [types] == "router" {
		elasticsearch {
			hosts => "elasticsearch:9200"
			index => "recon-router_information"
		}
	}
	else if [types] == "ssh" {
		elasticsearch {
			hosts => "elasticsearch:9200"
			index => "recon-ssh_info"
		}
	}
	else if [types] == "sip" {
		elasticsearch {
			hosts => "elasticsearch:9200"
			index => "recon-sip_info"
		}
	}
	else if [types] == "snmp" {
		elasticsearch {
			hosts => "elasticsearch:9200"
			index => "recon-snmp_info"
		}
	}
	else if [types] == "spam_headers" {
		elasticsearch {
			hosts => "elasticsearch:9200"
			index => "recon-spam_headers"
		}
	}
	else if [types] == "urls" {
		elasticsearch {
			hosts => "elasticsearch:9200"
			index => "recon-urls"
		}
	}
	else if [types] == "useragents" {
		elasticsearch {
			hosts => "elasticsearch:9200"
			index => "recon-useragents"
		}
	}
	else if [types] == "tor" {
		elasticsearch {
			hosts => "elasticsearch:9200"
			index => "recon-proxies"
		}
	}
	else if [types] == "x509" {
		elasticsearch {
			hosts => "elasticsearch:9200"
			index => "recon-x509_certs"
		}
	}
}
